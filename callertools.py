""" Tools for organizing the output from each caller """
import os
import re
import sys
from pprint import pprint
if os.name == 'nt':
	GITHUB_FOLDER = os.path.join(os.getenv('USERPROFILE'), 'Documents', 'Github')
else:
	GITHUB_FOLDER = os.path.join(os.getenv('HOME'), 'Documents', 'Github')
sys.path.append(GITHUB_FOLDER)

import pytools.filetools as filetools


class CallerOutputClassifier:
	"""
		Searches a patient's folder for the relevant caller outputs.
		Keyword Arguments
		-----------------
			'reduce': bool; default False
				if 'True', will only return a single result.
			'verbose': bool; default False
		Returns
		-------
			outputs: dict<>
				* 'muse':           filename
				* 'mutect2':        filename
				* 'somaticsniper':  filename
				* 'strelka-indel':  filename
				* 'strelka-snv':    filename
				* 'varscan-indel':  filename
				* 'varscan-snv':    filename
		Usage
		-----
			classifier = CallerOutputClassifier()
			result = classifier(patient_folder)
	"""
	def __init__(self, **kwargs):
		self.return_single_result = kwargs.get('reduce', False)
		self.verbose = kwargs.get('verbose', False)
		#self.suffixes = self._defineCallerIdentifiers()

	def __call__(self, folder, key, **kwargs):
		""" Parameters
			----------
				folder: the patient's folder
		"""
		self.suffixes = self._defineCallerIdentifiers(key)
		file_list = filetools.listAllFiles(folder, **kwargs)

		caller_outputs = self._searchFolder(file_list)
		if self.return_single_result:
			caller_outputs = self._reduce(caller_outputs)

		return caller_outputs

	@staticmethod
	def _reduce(outputs):
		outputs = {k: (v if isinstance(v, str) else v[0]) for k, v in outputs.items()}
		return outputs

	@staticmethod
	def _checkSuffixes(filename, suffixes):
		""" Checks the suffixes to see if they're a match """
		is_caller = any(filename.endswith(s) for s in suffixes)
		return is_caller

	@staticmethod
	def _defineCallerIdentifiers(key):
		""" Defines the suffixes for each caller's expected output """
		if key == 'original':
			suffixes = {
				'muse':             ['.Muse.vcf'],
				'mutect2':          ['.mutect2.vcf'],
				'somaticsniper':    ['.somaticsniper.vcf'],
				'strelka-indel':    ['.passed.somatic.indels.vcf.strelka.vcf'],
				'strelka-snp':      ['.passed.somatic.snvs.vcf.strelka.vcf'],
				'varscan-snp':      ['.raw.indel.vcf'],
				'varscan-indel':    ['.raw.snp.vcf']
			}
		elif key == 'original-fixed':
			suffixes = {
				'muse':             ['.Muse.corrected.vcf'],
				'mutect2':          ['.mutect2.corrected.vcf'],
				'somaticsniper':    ['.somaticsniper.corrected.vcf'],
				'strelka-indel':    ['.passed.somatic.indels.vcf.strelka.corrected.vcf'],
				'strelka-snp':      ['.passed.somatic.snvs.vcf.strelka.corrected.vcf'],
				'varscan-snp':      ['.raw.indel.corrected.vcf'],
				'varscan-indel':    ['.raw.snp.corrected.vcf']
			}
		elif key == 'original-fixed-split':
			suffixes = {
				'muse-indel':       ['.Muse.corrected.indel.vcf'],
				'muse-snp':         ['.Muse.corrected.snp.vcf'],
				'mutect2-indel':    ['.mutect2.corrected.indel.vcf'],
				'mutect2-snp':      ['.mutect2.corrected.snp.vcf'],
				'somaticsniper-indel':['.somaticsniper.corrected.indel.vcf'],
				'somaticsniper-snp':['.somaticsniper.corrected.snp.vcf'],
				'strelka-indel':    ['.passed.somatic.indels.vcf.strelka.corrected.vcf'],
				'strelka-snp':      ['.passed.somatic.snvs.vcf.strelka.corrected.vcf'],
				'varscan-snp':      ['.raw.indel.corrected.vcf'],
				'varscan-indel':    ['.raw.snp.corrected.vcf']           

			}
		else:
			message = "Incorrect key provided ('{}'), expected one of {}".format(
				key, ', '.join(['original', 'original-fixed', 'original-fixed-split']))
			raise KeyError(message)

		return suffixes

	def _getOutputCallers(self, filename):
		""" returns the name of the caller a specific filename was generated by """

		for caller, suffixes in self.suffixes.items():
			result = self._checkSuffixes(filename, suffixes)
			if result: return caller

	def _searchFolder(self, file_list):
		""" Classifies all files within a folder. Files
			that do not match any callers are excluded.
		"""
		result = dict()
		for filename in file_list:
			caller = self._getOutputCallers(filename)
			if caller is None: continue
			elif caller in result:
				result[caller].append(filename)
			else:
				result[caller] = [filename]

		return result


class CallerClassifier:
	""" Classifies a callset based on caller via regexes.
	"""
	def __init__(self):
		self.regexes = self._defineRegexes()

	def __call__(self, folder, **kwargs):

		all_files = filetools.listAllFiles(folder, **kwargs)

		results = dict()
		for filename in all_files:
			caller = self._classifyFilename(filename)
			if caller:
				if 'indel' in caller or 'snp' in caller:
					_addition = ''
				elif 'indel' in filename:
					_addition = '-indel'
				elif 'snp' in filename or 'snv' in filename:
					_addition = '-snp'
				else:
					_addition = ''
				caller_key = caller[:-1] + _addition
				results[caller_key] = filename
		return results

	def _classifyFilename(self, filename):
		filename = filename.lower()
		for caller_base_name, templates in self.regexes.items():
			for caller, regex in templates.items():
				match = regex.search(filename)
				if match:
					return caller     
		

	@staticmethod
	def _defineRegexes():
		muse_regex = {
			'muse0': ".muse\..*\.?vcf$",
		}
		mutect_regex = {
			'mutect20': "\.mutect2\..*\.?vcf$"
		}
		somaticsniper_regex = {
			'somaticsniper0': "\.somaticsniper.*\.vcf$"
		}
		strelka_regex = {
			'strelka-indel0': "\.passed\.somatic\.indels\..*\.?vcf$",
			'strelka-snp0': "\.passed\.somatic\.sn[vp]s\..*\.?vcf$"
		}
		varscan_regex = {
			'varscan-indel0': "\.raw\.indel\..*\.?vcf$",
			'varscan-snp0':   "\.raw\.snp\.somatic\.hc\..*\.?vcf$"
		}

		regexes = {
			'muse': {k:re.compile(v) for k, v in muse_regex.items()},
			'mutect2': {k:re.compile(v) for k, v in mutect_regex.items()},
			'somaticsniper': {k:re.compile(v) for k,v in somaticsniper_regex.items()},
			'strelka': {k:re.compile(v) for k, v in strelka_regex.items()},
			'varscan': {k:re.compile(v) for k, v in varscan_regex.items()}
		}
		return regexes



if __name__ == "__main__":
	test_folder = "/home/upmc/Documents/Data/raw_snp_output/TCGA-2H-A9GR-CHROMS/chr1"
	test_classifier = CallerClassifier()
	test_result = test_classifier(test_folder)
	pprint(test_result)
	print("Finished!")
